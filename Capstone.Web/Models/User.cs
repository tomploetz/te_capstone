using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Web;

namespace Capstone.Web.Models
{
	public class User : BaseItem
	{
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public string UserName { get; set; }
		public string Password { get; set; }
		public string Salt { get; set; }
		public int RoleId { get; set; }

		//public User Clone()
		//{
		//	User user = new User();
		//	user.Id = this.Id;
		//	user.FirstName = this.FirstName;
		//	user.LastName = this.LastName;
		//	user.UserName = this.UserName;
		//	user.Password = this.Password;
		//	user.Salt = this.Salt;
		//	user.RoleId = this.RoleId;

		//	return user;
		//}

		private static int _workFactor = 20;
		private static int _saltSize = 16;

		/// <summary>
		/// default constructor for creating users
		/// </summary>
		public User()
		{

		}

		/// <summary>
		/// constructor to create a new user, generates a hash and salt for verification
		/// </summary>
		/// <param name="password">user submitted password to be hashed and saved to DB</param>
		public User(string password)
		{
			this.Password = password;
			GenerateSalt();
			GenerateHash();
		}

		/// <summary>
		/// constructor to verify a login on a user that's already been created
		/// </summary>
		/// <param name="password">takes in attempted password to verify</param>
		/// <param name="salt">salt from the user record in the DB</param>
		public User(string password, string salt)
		{
			this.Password = password;
			this.Salt = salt;
			GenerateHash();
		}

		//use this to verify the hash from the database is the 
		//same as the hash generated by the user trying to log in
		/// <summary>
		/// checks if the password provided by the user matches the hash created from the salt
		/// </summary>
		/// <param name="hash"></param>
		/// <returns>returns true if the password hash created matches the hash in the user record</returns>
		public bool Verify(string hash)
		{
			return Password == hash;
		}

		#region Private methods

		private void GenerateSalt()
		{
			Rfc2898DeriveBytes rfc = new Rfc2898DeriveBytes(Password, _saltSize, _workFactor);
			Salt = GetSalt(rfc);
		}

		private void GenerateHash()
		{
			Rfc2898DeriveBytes rfc = HashPasswordWithPBKDF2(Password, Salt);
			Password = GetHash(rfc);
		}

		private static Rfc2898DeriveBytes HashPasswordWithPBKDF2(string password, string salt)
		{
			// Creates the crypto service provider and provides the salt - usually used to check for a password match
			Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, Convert.FromBase64String(salt), _workFactor);

			return rfc2898DeriveBytes;
		}

		private static string GetHash(Rfc2898DeriveBytes rfc)
		{
			return Convert.ToBase64String(rfc.GetBytes(20));
		}

		private static string GetSalt(Rfc2898DeriveBytes rfc)
		{
			return Convert.ToBase64String(rfc.Salt);
		}

		#endregion

	}
}